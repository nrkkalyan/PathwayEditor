/****************************************************************************
 **
 ** This file is part of yFiles-2.8. 
 ** 
 ** yWorks proprietary/confidential. Use is subject to license terms.
 **
 ** Redistribution of this file or of an unauthorized byte-code version
 ** of this file is strictly forbidden.
 **
 ** Copyright (c) 2000-2010 by yWorks GmbH, Vor dem Kreuzberg 28, 
 ** 72070 Tuebingen, Germany. All rights reserved.
 **
 ***************************************************************************/
package demo.layout.tree;

import java.awt.Dimension;
import java.awt.event.ItemEvent;
import java.util.Hashtable;
import javax.swing.JLabel;
import javax.swing.event.ChangeEvent;
import y.base.Node;
import y.layout.DefaultLayoutGraph;
import y.layout.tree.DefaultNodePlacer;
import y.layout.tree.GenericTreeLayouter;
import y.layout.tree.NodePlacer;
import y.util.DataProviders;

/**
 * Property editor panel used by
 * {@link demo.layout.tree.IncrementalTreeLayouterDemo} 
 * to provide means for configuring the generic tree layouter.
 * 
 */
class DefaultNodePlacerConfigPanel extends javax.swing.JPanel
{
  
  private DefaultNodePlacer placer;
  
  /** Creates new form DefaultNodePlacerConfigPanel */
  public DefaultNodePlacerConfigPanel()
  {
    initComponents();
    DefaultLayoutGraph graph = new DefaultLayoutGraph();
    Node root = graph.createNode();
    graph.getNodeLayout(root).setSize(30,30);
    for (int i = 0; i < 3; i++){
      Node child = graph.createNode();
      graph.getNodeLayout(child).setSize(50 - i * 10 ,30);
      graph.createEdge(root, child);
    }
    placer = new DefaultNodePlacer(DefaultNodePlacer.PLACEMENT_HORIZONTAL_DOWNWARD, 40, 40);
    layoutPreviewPanel.setGraph(graph);
    layoutPreviewPanel.setPreferredSize(new Dimension(160,160));
    graph.addDataProvider(GenericTreeLayouter.NODE_PLACER_DPKEY, DataProviders.createConstantDataProvider(placer));
    layoutPreviewPanel.setLayouter(new GenericTreeLayouter());
    updateFromPlacer();
    layoutPreviewPanel.update();
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
  private void initComponents()//GEN-BEGIN:initComponents
  {
    java.awt.GridBagConstraints gridBagConstraints;

    childPlacementLabel = new javax.swing.JLabel();
    rootAlignmentLabel = new javax.swing.JLabel();
    alignmentSlider = new javax.swing.JSlider();
    horizontalSlider = new javax.swing.JSlider();
    hSpacingLabel = new javax.swing.JLabel();
    placementComboBox = new javax.swing.JComboBox();
    verticalSlider = new javax.swing.JSlider();
    vSpacingLabel = new javax.swing.JLabel();
    previewPanel = new javax.swing.JPanel();
    layoutPreviewPanel = new demo.layout.withoutview.LayoutPreviewPanel();
    routingStyleLabel = new javax.swing.JLabel();
    routingStyleComboBox = new javax.swing.JComboBox();

    setLayout(new java.awt.GridBagLayout());

    setBorder(new javax.swing.border.EmptyBorder(new java.awt.Insets(6, 6, 6, 6)));
    childPlacementLabel.setText("Child Placement");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
    add(childPlacementLabel, gridBagConstraints);

    rootAlignmentLabel.setText("Root Alignment");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 8;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(7, 0, 0, 0);
    add(rootAlignmentLabel, gridBagConstraints);

    alignmentSlider.setMaximum(5);
    alignmentSlider.setMinorTickSpacing(1);
    alignmentSlider.setPaintLabels(true);
    alignmentSlider.setPaintTicks(true);
    alignmentSlider.setSnapToTicks(true);
    //Create the label table
    Hashtable labelTable = new Hashtable();
    labelTable.put( new Integer( 0 ), new JLabel("Leading") );
    labelTable.put( new Integer( 3 ), new JLabel("Median") );
    labelTable.put( new Integer( 5 ), new JLabel("Trailing") );
    alignmentSlider.setLabelTable( labelTable );
    alignmentSlider.addChangeListener(new javax.swing.event.ChangeListener()
    {
      public void stateChanged(javax.swing.event.ChangeEvent evt)
      {
        alignmentSliderStateChanged(evt);
      }
    });

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 9;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    add(alignmentSlider, gridBagConstraints);

    horizontalSlider.setMinorTickSpacing(5);
    horizontalSlider.setPaintTicks(true);
    horizontalSlider.addChangeListener(new javax.swing.event.ChangeListener()
    {
      public void stateChanged(javax.swing.event.ChangeEvent evt)
      {
        horizontalSliderStateChanged(evt);
      }
    });

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 5;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    add(horizontalSlider, gridBagConstraints);

    hSpacingLabel.setText("Horizontal Spacing");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 4;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
    add(hSpacingLabel, gridBagConstraints);

    placementComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Horizontally Downwards", "Horizontally Upwards", "Vertically to Left", "Vertically to Right" }));
    placementComboBox.addItemListener(new java.awt.event.ItemListener()
    {
      public void itemStateChanged(java.awt.event.ItemEvent evt)
      {
        placementComboBoxItemStateChanged(evt);
      }
    });

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 1;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 4);
    add(placementComboBox, gridBagConstraints);

    verticalSlider.setMinorTickSpacing(5);
    verticalSlider.setPaintTicks(true);
    verticalSlider.addChangeListener(new javax.swing.event.ChangeListener()
    {
      public void stateChanged(javax.swing.event.ChangeEvent evt)
      {
        verticalSliderStateChanged(evt);
      }
    });

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 7;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    add(verticalSlider, gridBagConstraints);

    vSpacingLabel.setText("Vertical Spacing");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 6;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
    add(vSpacingLabel, gridBagConstraints);

    previewPanel.setLayout(new java.awt.BorderLayout());

    previewPanel.setBorder(new javax.swing.border.TitledBorder("Preview"));
    layoutPreviewPanel.setBackground(new java.awt.Color(255, 255, 255));
    previewPanel.add(layoutPreviewPanel, java.awt.BorderLayout.CENTER);

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 10;
    gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
    gridBagConstraints.weightx = 1.0;
    gridBagConstraints.weighty = 1.0;
    add(previewPanel, gridBagConstraints);

    routingStyleLabel.setText("Routing Style");
    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 2;
    gridBagConstraints.anchor = java.awt.GridBagConstraints.SOUTHWEST;
    gridBagConstraints.insets = new java.awt.Insets(6, 0, 0, 0);
    add(routingStyleLabel, gridBagConstraints);

    routingStyleComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Fork", "Fork at Root", "Straight Connect", "Poly Line Connect" }));
    routingStyleComboBox.addItemListener(new java.awt.event.ItemListener()
    {
      public void itemStateChanged(java.awt.event.ItemEvent evt)
      {
        routingStyleComboBoxItemStateChanged(evt);
      }
    });

    gridBagConstraints = new java.awt.GridBagConstraints();
    gridBagConstraints.gridx = 0;
    gridBagConstraints.gridy = 3;
    gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
    gridBagConstraints.insets = new java.awt.Insets(0, 4, 0, 5);
    add(routingStyleComboBox, gridBagConstraints);

  }//GEN-END:initComponents

  private void routingStyleComboBoxItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_routingStyleComboBoxItemStateChanged
  {//GEN-HEADEREND:event_routingStyleComboBoxItemStateChanged
    if (evt.getStateChange() == ItemEvent.SELECTED){
      switch (routingStyleComboBox.getSelectedIndex()){
        case 0:
          placer.setRoutingStyle(DefaultNodePlacer.ROUTING_FORK);
          break;
        case 1:
          placer.setRoutingStyle(DefaultNodePlacer.ROUTING_FORK_AT_ROOT);
          break;
        case 2:
          placer.setRoutingStyle(DefaultNodePlacer.ROUTING_STRAIGHT);
          break;
        case 3:
          placer.setRoutingStyle(DefaultNodePlacer.ROUTING_POLY_LINE);
          break;
      }
      layoutPreviewPanel.update();
      fireChangeListenerStateChanged(new ChangeEvent(this));
    }
  }//GEN-LAST:event_routingStyleComboBoxItemStateChanged

  private void verticalSliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_verticalSliderStateChanged
  {//GEN-HEADEREND:event_verticalSliderStateChanged
    placer.setVerticalDistance(verticalSlider.getValue());
    layoutPreviewPanel.update();
    fireChangeListenerStateChanged(new ChangeEvent(this));
  }//GEN-LAST:event_verticalSliderStateChanged

  private void horizontalSliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_horizontalSliderStateChanged
  {//GEN-HEADEREND:event_horizontalSliderStateChanged
    placer.setHorizontalDistance(horizontalSlider.getValue());
    layoutPreviewPanel.update();
    fireChangeListenerStateChanged(new ChangeEvent(this));
  }//GEN-LAST:event_horizontalSliderStateChanged

  private void alignmentSliderStateChanged(javax.swing.event.ChangeEvent evt)//GEN-FIRST:event_alignmentSliderStateChanged
  {//GEN-HEADEREND:event_alignmentSliderStateChanged
    placer.setRootAlignment((byte) alignmentSlider.getValue());
    layoutPreviewPanel.update();
    fireChangeListenerStateChanged(new ChangeEvent(this));
  }//GEN-LAST:event_alignmentSliderStateChanged

  private void placementComboBoxItemStateChanged(java.awt.event.ItemEvent evt)//GEN-FIRST:event_placementComboBoxItemStateChanged
  {//GEN-HEADEREND:event_placementComboBoxItemStateChanged
    if (evt.getStateChange() == ItemEvent.SELECTED){
      switch (placementComboBox.getSelectedIndex()){
        case 0:
          placer.setChildPlacement(DefaultNodePlacer.PLACEMENT_HORIZONTAL_DOWNWARD);
          break;
        case 1:
          placer.setChildPlacement(DefaultNodePlacer.PLACEMENT_HORIZONTAL_UPWARD);
          break;
        case 2:
          placer.setChildPlacement(DefaultNodePlacer.PLACEMENT_VERTICAL_TO_LEFT);
          break;
        case 3:
          placer.setChildPlacement(DefaultNodePlacer.PLACEMENT_VERTICAL_TO_RIGHT);
          break;
      }
      layoutPreviewPanel.update();
      fireChangeListenerStateChanged(new ChangeEvent(this));
    }
  }//GEN-LAST:event_placementComboBoxItemStateChanged
  
  public void updateFromPlacer(){
    switch (placer.getChildPlacement()){
      case DefaultNodePlacer.PLACEMENT_HORIZONTAL_DOWNWARD:
        placementComboBox.setSelectedIndex(0);
        break;
      case DefaultNodePlacer.PLACEMENT_HORIZONTAL_UPWARD:
        placementComboBox.setSelectedIndex(1);
        break;
      case DefaultNodePlacer.PLACEMENT_VERTICAL_TO_LEFT:
        placementComboBox.setSelectedIndex(2);
        break;
      case DefaultNodePlacer.PLACEMENT_VERTICAL_TO_RIGHT:
        placementComboBox.setSelectedIndex(3);
        break;
    }
    switch (placer.getRoutingStyle()){
      case DefaultNodePlacer.ROUTING_FORK:
        routingStyleComboBox.setSelectedIndex(0);
        break;
      case DefaultNodePlacer.ROUTING_FORK_AT_ROOT:
        routingStyleComboBox.setSelectedIndex(1);
        break;
      case DefaultNodePlacer.ROUTING_STRAIGHT:
        routingStyleComboBox.setSelectedIndex(2);
        break;
      case DefaultNodePlacer.ROUTING_POLY_LINE:
        routingStyleComboBox.setSelectedIndex(3);
        break;
    }
    alignmentSlider.setValue(placer.getRootAlignment());
    horizontalSlider.setValue((int)placer.getHorizontalDistance());
    verticalSlider.setValue((int)placer.getVerticalDistance());
  }
  
  public void adoptPlacerValues(NodePlacer fromPlacer){
    if (fromPlacer instanceof DefaultNodePlacer){
      DefaultNodePlacer p = (DefaultNodePlacer) fromPlacer;
      this.placer.setRoutingStyle(p.getRoutingStyle());
      this.placer.setChildPlacement(p.getChildPlacement());
      this.placer.setVerticalDistance(p.getVerticalDistance());
      this.placer.setHorizontalDistance(p.getHorizontalDistance());
      this.placer.setRootAlignment(p.getRootAlignment());
      updateFromPlacer();
    }
  }
  
  public NodePlacer createPlacerCopy(){
    return (NodePlacer) placer.clone();
  }
  
  /**
   * Registers ChangeListener to receive events.
   * @param listener The listener to register.
   */
  public synchronized void addChangeListener(javax.swing.event.ChangeListener listener)
  {
    if (changeListenerList == null )
    {
      changeListenerList = new java.util.ArrayList();
    }
    changeListenerList.add(listener);
  }
  
  /**
   * Removes ChangeListener from the list of listeners.
   * @param listener The listener to remove.
   */
  public synchronized void removeChangeListener(javax.swing.event.ChangeListener listener)
  {
    if (changeListenerList != null )
    {
      changeListenerList.remove(listener);
    }
  }
  
  /**
   * Notifies all registered listeners about the event.
   *
   * @param event The event to be fired
   */
  private void fireChangeListenerStateChanged(javax.swing.event.ChangeEvent event)
  {
    java.util.ArrayList list;
    synchronized (this)
    {
      if (changeListenerList == null) return;
      list = (java.util.ArrayList)changeListenerList.clone();
    }
    for (int i = 0; i < list.size(); i++)
    {
      ((javax.swing.event.ChangeListener)list.get(i)).stateChanged(event);
    }
  }
  
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JSlider alignmentSlider;
  private javax.swing.JLabel childPlacementLabel;
  private javax.swing.JLabel hSpacingLabel;
  private javax.swing.JSlider horizontalSlider;
  private demo.layout.withoutview.LayoutPreviewPanel layoutPreviewPanel;
  private javax.swing.JComboBox placementComboBox;
  private javax.swing.JPanel previewPanel;
  private javax.swing.JLabel rootAlignmentLabel;
  private javax.swing.JComboBox routingStyleComboBox;
  private javax.swing.JLabel routingStyleLabel;
  private javax.swing.JLabel vSpacingLabel;
  private javax.swing.JSlider verticalSlider;
  // End of variables declaration//GEN-END:variables

  /**
   * Utility field holding list of ChangeListeners.
   */
  private transient java.util.ArrayList changeListenerList;  
   
}
